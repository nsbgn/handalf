#!/bin/bash

# XF86RotateWindows XF86ApplicationLeft XF86ApplicationRight XF86AudioPause XF86Terminal 

if [ -z "${DISPLAY}" ]; then
    echo "\$DISPLAY not set" >&2
    exit 1
fi

XKBDIR=/tmp/xkb
mkdir -p ${XKBDIR}/{keymap,symbols,types,compat}

# Generate a basic keymap.
setxkbmap -option -print \
    | sed 's/\(\s*xkb_symbols\s*{\s*include\s*".*\)\("\s*};\s*\)/\1+thumbledore\2/g' \
    | sed 's/\(\s*xkb_compat\s*{\s*include\s*".*\)\("\s*};\s*\)/\1+thumbledore\2/g' \
    > ${XKBDIR}/keymap/thumbledore.xkb

setxkbmap -option -print \
    | sed 's/\(\s*xkb_symbols\s*{\s*include\s*".*\)\("\s*};\s*\)/\1+thumbledore+thumbledore(space2bksp)\2/g' \
    | sed 's/\(\s*xkb_compat\s*{\s*include\s*".*\)\("\s*};\s*\)/\1+thumbledore\2/g' \
    > ${XKBDIR}/keymap/thumbledore-left.xkb

tee > ${XKBDIR}/compat/thumbledore << EOF
default
xkb_compatibility "td" {
    interpret BackSpace+AnyOfOrNone(all) {
        repeat= True;
        action= Redirect(key=<BKSP>);
    };
    interpret Return+AnyOfOrNone(all) {
        repeat= True;
        action= Redirect(key=<RTRN>);
    };

};
EOF

tee > ${XKBDIR}/symbols/thumbledore << EOF
default partial modifier_keys
partial
xkb_symbols "td" {

    key <BKSP> { [ BackSpace, BackSpace, BackSpace, Delete ] };
    key <RTRN> { [ Return, Return, Return, Return ] };

    key <I251> { [ XF86Open ] };
    key <I252> { [ Multi_key ] };
    key <I253> { [ dead_greek ] };
    key <I254> { [ ISO_Level3_Latch ] };
    key <I255> { [ Escape ] };

    # Modifier keys themselves
    replace key <RALT> { [ ISO_Level5_Shift, ISO_Level5_Shift ], actions[Group1]=
         [ SetMods(mods=Shift+Mod5)
         , SetMods(mods=Shift+Mod5) ] };
    # replace key <LALT> { [ BackSpace ] };
    replace key <LALT> { [ ISO_Level3_Shift, ISO_Level3_Shift ] };
    replace key <LWIN> { [ Alt_L, Alt_R ] };
    replace key <CAPS> { [ Super_R ] };

    key <AD01> { [ q, Q, Home, asterisk ], actions[Group1] =
        [ NoAction()
        , NoAction()
        , Redirect(key=<HOME>, clearMods=Mod5)
        , NoAction()] };

    key <AD02> { [ w, W, Up, apostrophe ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<UP>, clearMods=Mod5)
        , NoAction()
        ] };
    key <AD03> { [ e, E, End, equal ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<END>, clearMods=Mod5) ] };
    key <AD04> { [ r, R, Prior, at ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<PGUP>, clearMods=Mod5) ] };
    key <AD05> { [ t, T, XF86Terminal ] };
    key <AD06> { [ y, Y, asterisk ] };
    key <AD07> { [ u, U, 7, percent ] };
    key <AD08> { [ i, I, 8, numbersign ] };
    key <AD09> { [ o, O, 9, quotedbl ] };
    key <AD10> { [ p, P, plus, plus ] };
    # key <AD11> { [ bracketleft, braceleft, asciicircum, asciicircum ] };
    # key <AD12> { [ bracketright, braceright, dollar, dollar ] };

    key <AC01> { [ a, A, Left, less ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<LEFT>, clearMods=Mod5+Shift) ] };
    key <AC02> { [ s, S, Down, braceleft ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<DOWN>, clearMods=Mod5+Shift) ] };
    key <AC03> { [ d, D, Right, bracketleft ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<RGHT>, clearMods=Mod5+Shift) ] };
    key <AC04> { [ f, F, Next, parenleft ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<PGDN>, clearMods=Mod5+Shift) ] };
    key <AC05> { [ g, G, VoidSymbol, slash ] };
    key <AC06> { [ h, H, slash, asciitilde ] };
    key <AC07> { [ j, J, 4, parenright ] };
    key <AC08> { [ k, K, 5, bracketright ] };
    key <AC09> { [ l, L, 6, braceright ] };
    key <AC10> { [ semicolon, colon, minus, greater ] };
    key <AC11> { [ apostrophe, quotedbl, equal, grave ] };

    key <AB01> { [ z, Z ] };
    key <AB02> { [ x, X, XF86Close ] };
    key <AB03> { [ c, C, VoidSymbol, asciicircum ] };
    key <AB04> { [ v, V, VoidSymbol, underscore ] };
    key <AB05> { [ b, B, VoidSymbol, bar ] };
    key <AB06> { [ n, N, 0, ampersand ] };
    key <AB07> { [ m, M, 1, minus ] };
    key <AB08> { [ comma, exclam, 2, dollar ] };
    key <AB09> { [ period, question, 3 ] };
    key <AB10> { [ slash, backslash, period ] };

    # Thumb cluster
    # key <SPCE> { [ space, space, BackSpace, Delete ], actions[Group1] = 
    #     [ NoAction()
    #     , Redirect(key=<SPCE>, clearMods=Shift)
    #     , Redirect(key=<BKSP>, clearMods=Mod5)
    #     , Redirect(key=<DELE>, clearMods=Mod5+Shift) ]
    # };
    # key <SPCE> { [ space, space, ISO_Level3_Lock, ISO_Level3_Lock ] };

};

partial xkb_symbols "space2bksp" {
    key <SPCE> { [ BackSpace ] };
};
EOF

# Find the keyboard IDs of the left and right parts of the R-Go Split keyboard
LEFT="$(xinput list | sed -n 's/.*HID 0911:2188\s\+id=\([0-9]\+\).*/\1/p')"
RIGHT=$(xinput list | sed -n 's/.*Hantick USB Keyboard\s\+id=\([0-9]\+\).*/\1/p')

# Compile the new xkbmap
xkbcomp -synch -w3 -I${XKBDIR} ${XKBDIR}/keymap/thumbledore.xkb ${DISPLAY}

if [ ! -z "$LEFT" ]; then
    xkbcomp -synch -w3 -I${XKBDIR} -i "$LEFT" ${XKBDIR}/keymap/thumbledore-left.xkb ${DISPLAY}
fi

# (Re)start xcape, to make sure we can still use the original keys by tapping
# the respective modifiers.
pkill xcape
tr '\n' ';' | xargs -I{} xcape -t 150ms -e {} << EOF
Super_R=Escape
Shift_L=XF86Open
ISO_Level3_Shift=Escape
ISO_Level5_Shift=Return
Control_L=Multi_key
Control_R=dead_greek
EOF

# ISO_Level3_Shift=ISO_Level3_Latch
# ISO_Level5_Shift=Tab
echo hello
