#!/bin/bash

# XF86RotateWindows XF86ApplicationLeft XF86ApplicationRight XF86AudioPause XF86Terminal 

if [ -z "${DISPLAY}" ]; then
    echo "\$DISPLAY not set" >&2
    exit 1
fi

XKBDIR=/tmp/xkb
mkdir -p ${XKBDIR}/{keymap,symbols,types,compat}

# Generate a basic keymap.
setxkbmap -option -print \
    | sed 's/\(\s*xkb_symbols\s*{\s*include\s*".*\)\("\s*};\s*\)/\1+thumbledore\2/g' \
    | sed 's/\(\s*xkb_compat\s*{\s*include\s*".*\)\("\s*};\s*\)/\1+thumbledore\2/g' \
    | sed 's/\(\s*xkb_types\s*{\s*include\s*".*\)\("\s*};\s*\)/\1+thumbledore\2/g' \
    > ${XKBDIR}/keymap/thumbledore.xkb

tee > ${XKBDIR}/compat/thumbledore << EOF
default xkb_compatibility "td" {
    interpret BackSpace+AnyOfOrNone(all) {
        repeat= True;
        action= Redirect(key=<BKSP>);
    };
    interpret Return+AnyOfOrNone(all) {
        repeat= True;
        action= Redirect(key=<RTRN>);
    };
    interpret ISO_Level3_Latch+AnyOfOrNone(all) {
        action= LatchMods(modifiers=LevelThree+Mod5+Shift,clearLocks,latchToLock);
    };
};
EOF

# Generate type map
tee > ${XKBDIR}/types/thumbledore << EOF
default xkb_types "td" {
    type "NONE_SHIFT_SUPER" {
        modifiers = Shift+Mod3;
        map[None] = Level1;
        map[Shift] = Level2;
        map[Mod3] = Level3;
        level_name[Level1] = "Base";
        level_name[Level2] = "Shift";
        level_name[Level3] = "Super";
    };
};
EOF

tee > ${XKBDIR}/symbols/thumbledore << EOF
default partial modifier_keys
partial
xkb_symbols "td" {

    key <BKSP> { [ BackSpace, BackSpace, BackSpace, Delete ] };
    key <RTRN> { [ Return, Return, Return, Return ] };
    key <SPCE> { [ space, space, space ] };

    key <I253> { [ Multi_key ] };
    key <I254> { [ dead_greek ] };
    key <I255> { [ Escape ] };

    # key.type[Group1] = "NONE_SHIFT_SUPER";

    # Modifier keys themselves
    replace key <CAPS> { [ BackSpace, BackSpace, Shift_L ] };

    replace key <RALT> { [ Shift_R ], actions[Group1]= [SetMods(mods=Shift)] };

    # replace key <RALT> {
    #     [ Super_R ],
    #     actions[Group1] = [ SetMods(mods=Mod3) ]};

    replace key <LALT> { [ ISO_Level3_Shift, ISO_Level3_Shift ], actions[Group1]=
         [ SetMods(mods=Mod5)
         , SetMods(mods=Mod5+Shift) ] };

    replace key <LWIN> { [ Alt_L, Alt_R ] };

    key <AD01> { [ q, Q, asterisk, Home ], actions[Group1] =
        [ NoAction() , NoAction()
        , Redirect(key=<HOME>, clearMods=Mod5)
        , NoAction()
        ] };

    key <AD02> { [ w, W, apostrophe, Up ], actions[Group1] =
        [ NoAction(), NoAction()
        , Redirect(key=<UP>, clearMods=Mod5)
        , NoAction()
        ] };
    key <AD03> { [ e, E, End, equal ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<END>, clearMods=Mod5) ] };
    key <AD04> { [ r, R, Prior, at ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<PGUP>, clearMods=Mod5) ] };
    key <AD05> { [ t, T, XF86Terminal ] };
    key <AD06> {
        [ y, Y ],
        [ asciitilde ]
    };
    key <AD07> {
        [ u, U ],
        [ 7, percent ]
    };
    key <AD08> {
        [ i, I ],
        [ numbersign ] };
    key <AD09> {
        [ o, O ],
        [ 9, quotedbl ]
    };
    key <AD10> {
        [ p, P ],
        [ plus, plus ]
    };

    key <AC01> { [ a, A, Left, less ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<LEFT>, clearMods=Mod5+Shift) ] };
    key <AC02> { [ s, S, Down, braceleft ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<DOWN>, clearMods=Mod5+Shift) ] };
    key <AC03> { [ d, D, Right, bracketleft ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<RGHT>, clearMods=Mod5+Shift) ] };
    key <AC04> { [ f, F, Next, parenleft ], actions[Group1] =
        [ NoAction(), NoAction(), Redirect(key=<PGDN>, clearMods=Mod5+Shift) ] };
    key <AC05> { [ g, G, VoidSymbol, minus ] };
    key <AC06> { [ h, H, slash, asterisk ] };
    key <AC07> { [ j, J, 4, parenright ] };
    key <AC08> { [ k, K, 5, bracketright ] };
    key <AC09> { [ l, L, 6, braceright ] };
    key <AC10> { [ semicolon, colon, minus, greater ] };
    key <AC11> { [ apostrophe, quotedbl, equal, grave ] };

    key <AB01> { [ z, Z ] };
    key <AB02> { [ x, X, XF86Close ] };
    key <AB03> { [ c, C, VoidSymbol, asciicircum ] };
    key <AB04> { [ v, V, VoidSymbol, minus ] };
    key <AB05> { [ b, B, VoidSymbol, bar ] };
    key <AB06> { [ n, N, 0, ampersand ] };
    key <AB07> { [ m, M, 1, underscore ] };
    key <AB08> { [ comma, less, 2, dollar ] };
    key <AB09> { [ period, greater, 3 ] };
    key <AB10> { [ slash, question, period ] };


};
EOF

# Compile the new xkbmap
xkbcomp -synch -w3 -I${XKBDIR} ${XKBDIR}/keymap/thumbledore.xkb ${DISPLAY}

# (Re)start xcape, to make sure we can still use the original keys by tapping
# the respective modifiers.
pkill xcape
TAP=$(tr -d '[:space:]' << EOF
    Shift_R=Return;
    ISO_Level3_Shift=Escape;
    Control_L=Multi_key;
    Control_R=dead_greek
EOF
)
xcape -t 150ms -e "${TAP}"
